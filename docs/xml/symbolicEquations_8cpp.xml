<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="symbolicEquations_8cpp" kind="file" language="C++">
    <compoundname>symbolicEquations.cpp</compoundname>
    <includes refid="symbolicEquations_8h" local="yes">symbolicEquations.h</includes>
    <incdepgraph>
      <node id="16">
        <label>sys/stat.h</label>
      </node>
      <node id="15">
        <label>sys/mman.h</label>
      </node>
      <node id="7">
        <label>Eigen/Geometry</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>fcntl.h</label>
      </node>
      <node id="3">
        <label>symengine/llvm_double.h</label>
      </node>
      <node id="4">
        <label>eigenIncludes.h</label>
        <link refid="eigenIncludes_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Eigen/Sparse</label>
      </node>
      <node id="6">
        <label>Eigen/Dense</label>
      </node>
      <node id="10">
        <label>unistd.h</label>
      </node>
      <node id="12">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="14">
        <label>csignal</label>
      </node>
      <node id="2">
        <label>symbolicEquations.h</label>
        <link refid="symbolicEquations_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/radha/Desktop/dismech-rods-main/src/rod_mechanics/external_forces/symbolicEquations.cpp</label>
        <link refid="symbolicEquations_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>your name (<ulink url="mailto:you@domain.com">you@domain.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2023-12-27</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2023 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="symbolicEquations_8h" kindref="compound">symbolicEquations.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">symbolicEquations::symbolicEquations()<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>x1s_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1s_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>x1s_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1s_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>x1s_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1s_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>x1e_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1e_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>x1e_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1e_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>x1e_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1e_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>x2s_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2s_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>x2s_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2s_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>x2s_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2s_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>x2e_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2e_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>x2e_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2e_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>x2e_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2e_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>K1<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;K1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>h2<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;h2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>x1s_x0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1s_x0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>x1s_y0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1s_y0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>x1s_z0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1s_z0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>x1e_x0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1e_x0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>x1e_y0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1e_y0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>x1e_z0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x1e_z0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>x2s_x0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2s_x0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>x2s_y0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2s_y0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>x2s_z0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2s_z0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>x2e_x0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2e_x0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>x2e_y0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2e_y0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>x2e_z0<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;x2e_z0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>f1s_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f1s_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>f1s_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f1s_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>f1s_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f1s_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>f1e_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f1e_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>f1e_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f1e_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>f1e_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f1e_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>f2s_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f2s_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>f2s_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f2s_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>f2s_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f2s_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>f2e_x<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f2e_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>f2e_y<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f2e_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>f2e_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;f2e_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>mu<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;dt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>K2<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;K2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>floor_z<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;floor_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>symbolic_cse<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>opt_level<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>some<sp/>reason<sp/>SymEngine<sp/>doesn&apos;t<sp/>have<sp/>this<sp/>implemented<sp/>X_X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>symbolicEquations::subtract_matrix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DenseMatrix<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DenseMatrix<sp/>&amp;B,<sp/>DenseMatrix<sp/>&amp;C)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((A.nrows()<sp/>==<sp/>B.nrows())<sp/>&amp;&amp;<sp/>(A.ncols()<sp/>==<sp/>B.ncols()));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>A.nrows();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>A.ncols();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.set(i,<sp/>j,<sp/>sub(A.get(i,<sp/>j),<sp/>B.get(i,<sp/>j)));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>symbolicEquations::get_norm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DenseMatrix<sp/>&amp;num,<sp/>RCP&lt;const<sp/>Basic&gt;<sp/>&amp;C)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>tmp(num.nrows(),<sp/>num.ncols());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>num.elementwise_mul_matrix(num,<sp/>tmp);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>C<sp/>=<sp/>sqrt(add(tmp.as_vec_basic()));</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>symbolicEquations::convert_to_unit_vector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DenseMatrix<sp/>&amp;num,<sp/>DenseMatrix<sp/>&amp;C)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>tmp(num.nrows(),<sp/>num.ncols());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>num.elementwise_mul_matrix(num,<sp/>tmp);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>sqrt(add(tmp.as_vec_basic()));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>num.nrows();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>num.ncols();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.set(i,<sp/>j,<sp/>div(num.get(i,<sp/>j),<sp/>norm));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>symbolicEquations::generateContactPotentialPiecewiseFunctions()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>POINT<sp/>TO<sp/>POINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x1s({x1s_x,<sp/>x1s_y,<sp/>x1s_z});</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x1e({x1e_x,<sp/>x1e_y,<sp/>x1e_z});</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x2s({x2s_x,<sp/>x2s_y,<sp/>x2s_z});</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x2e({x2e_x,<sp/>x2e_y,<sp/>x2e_z});</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows<sp/>=<sp/>x1s.nrows();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cols<sp/>=<sp/>x1s.ncols();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>nodes_vec_p2p<sp/>{x1s_x,<sp/>x1s_y,<sp/>x1s_z,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1e_x,<sp/>x1e_y,<sp/>x1e_z};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>nodes_p2p<sp/>{nodes_vec_p2p};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>func_p2p_inputs(nodes_vec_p2p);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>func_p2p_inputs.push_back(K1);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>func_p2p_inputs.push_back(h2);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>e1(num_rows,<sp/>num_cols);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x1e,<sp/>x1s,<sp/>e1);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>dist_p2p;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(e1,<sp/>dist_p2p);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>to<sp/>Point<sp/><sp/><sp/>2h<sp/>-<sp/>δ<sp/>&lt;<sp/>Δ<sp/>&lt;<sp/>2h<sp/>+<sp/>δ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>E_p2p<sp/>=<sp/>pow(mul(div(one,<sp/>K1),<sp/>log(add(one,<sp/>exp(mul(K1,<sp/>sub(h2,<sp/>dist_p2p)))))),<sp/>2);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_p2p_potential({E_p2p});</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_p2p_gradient(1,<sp/>6);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_p2p_potential,<sp/>nodes_p2p,<sp/>E_p2p_gradient);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_p2p_hessian(6,<sp/>6);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_p2p_gradient,<sp/>nodes_p2p,<sp/>E_p2p_hessian);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>E_p2p_gradient_func.init(func_p2p_inputs,<sp/>E_p2p_gradient.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>E_p2p_hessian_func.init(func_p2p_inputs,<sp/>E_p2p_hessian.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>to<sp/>Point<sp/><sp/><sp/><sp/>Δ<sp/>&lt;=<sp/>2h<sp/>-<sp/>δ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>E_p2p_pen<sp/>=<sp/>pow(sub(h2,<sp/>dist_p2p),<sp/>2);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_p2p_pen_potential{{E_p2p_pen}};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_p2p_pen_gradient(1,<sp/>6);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_p2p_pen_potential,<sp/>nodes_p2p,<sp/>E_p2p_pen_gradient);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_p2p_pen_hessian(6,<sp/>6);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_p2p_pen_gradient,<sp/>nodes_p2p,<sp/>E_p2p_pen_hessian);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>E_p2p_pen_gradient_func.init(func_p2p_inputs,<sp/>E_p2p_pen_gradient.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>E_p2p_pen_hessian_func.init(func_p2p_inputs,<sp/>E_p2p_pen_hessian.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>POINT<sp/>TO<sp/>EDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>nodes_vec_e2p<sp/>{x1s_x,<sp/>x1s_y,<sp/>x1s_z,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1e_x,<sp/>x1e_y,<sp/>x1e_z,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2s_x,<sp/>x2s_y,<sp/>x2s_z};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>nodes_e2p<sp/>{nodes_vec_e2p};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>func_e2p_inputs(nodes_vec_e2p);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>func_e2p_inputs.push_back(K1);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>func_e2p_inputs.push_back(h2);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>e13(num_rows,<sp/>num_cols);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x1s,<sp/>x2s,<sp/>e13);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>e23(num_rows,<sp/>num_cols);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x1e,<sp/>x2s,<sp/>e23);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>temp(num_rows,<sp/>num_cols);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>cross(e13,<sp/>e23,<sp/>temp);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>frac1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(temp,<sp/>frac1);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>dist_e2p<sp/>=<sp/>div(frac1,<sp/>dist_p2p);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>to<sp/>Edge<sp/><sp/><sp/>2h<sp/>-<sp/>δ<sp/>&lt;<sp/>Δ<sp/>&lt;<sp/>2h<sp/>+<sp/>δ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>E_e2p<sp/>=<sp/>pow(mul(div(one,<sp/>K1),<sp/>log(add(one,<sp/>exp(mul(K1,<sp/>sub(h2,<sp/>dist_e2p)))))),<sp/>2);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2p_potential{{E_e2p}};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2p_gradient(1,<sp/>9);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2p_potential,<sp/>nodes_e2p,<sp/>E_e2p_gradient);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2p_hessian(9,<sp/>9);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2p_gradient,<sp/>nodes_e2p,<sp/>E_e2p_hessian);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2p_gradient_func.init(func_e2p_inputs,<sp/>E_e2p_gradient.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2p_hessian_func.init(func_e2p_inputs,<sp/>E_e2p_hessian.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>to<sp/>Edge<sp/><sp/><sp/><sp/>Δ<sp/>&lt;=<sp/>2h<sp/>-<sp/>δ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>E_e2p_pen<sp/>=<sp/>pow(sub(h2,<sp/>dist_e2p),<sp/>2);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2p_pen_potential{{E_e2p_pen}};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2p_pen_gradient(1,<sp/>9);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2p_pen_potential,<sp/>nodes_e2p,<sp/>E_e2p_pen_gradient);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2p_pen_hessian(9,<sp/>9);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2p_pen_gradient,<sp/>nodes_e2p,<sp/>E_e2p_pen_hessian);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2p_pen_gradient_func.init(func_e2p_inputs,<sp/>E_e2p_pen_gradient.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2p_pen_hessian_func.init(func_e2p_inputs,<sp/>E_e2p_pen_hessian.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EDGE<sp/>TO<sp/>EDGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>nodes_vec_e2e<sp/>{x1s_x,<sp/>x1s_y,<sp/>x1s_z,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1e_x,<sp/>x1e_y,<sp/>x1e_z,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2s_x,<sp/>x2s_y,<sp/>x2s_z,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2e_x,<sp/>x2e_y,<sp/>x2e_z};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>nodes_e2e<sp/>{nodes_vec_e2e};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>func_e2e_inputs(nodes_vec_e2e);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>func_e2e_inputs.push_back(K1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>func_e2e_inputs.push_back(h2);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>e2(num_rows,<sp/>num_cols);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x2e,<sp/>x2s,<sp/>e2);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>num(num_rows,<sp/>num_cols);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>cross(e1,<sp/>e2,<sp/>num);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>num_hat(num_rows,<sp/>num_cols);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_to_unit_vector(num,<sp/>num_hat);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>num_hat.elementwise_mul_matrix(e13,<sp/>temp);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>dist_e2e<sp/>=<sp/>sqrt(pow(add(temp.as_vec_basic()),<sp/>2));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Edge<sp/>to<sp/>Edge<sp/><sp/><sp/>2h<sp/>-<sp/>δ<sp/>&lt;<sp/>Δ<sp/>&lt;<sp/>2h<sp/>+<sp/>δ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>E_e2e<sp/>=<sp/>pow(mul(div(one,<sp/>K1),<sp/>log(add(one,<sp/>exp(mul(K1,<sp/>sub(h2,<sp/>dist_e2e)))))),<sp/>2);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2e_potential{{E_e2e}};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2e_gradient(1,<sp/>12);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2e_potential,<sp/>nodes_e2e,<sp/>E_e2e_gradient);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2e_hessian(12,<sp/>12);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2e_gradient,<sp/>nodes_e2e,<sp/>E_e2e_hessian);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2e_gradient_func.init(func_e2e_inputs,<sp/>E_e2e_gradient.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2e_hessian_func.init(func_e2e_inputs,<sp/>E_e2e_hessian.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Edge<sp/>to<sp/>Edge<sp/><sp/><sp/><sp/>Δ<sp/>&lt;=<sp/>2h<sp/>-<sp/>δ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>E_e2e_pen<sp/>=<sp/>pow(sub(h2,<sp/>dist_e2e),<sp/>2);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2e_pen_potential{{E_e2e_pen}};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2e_pen_gradient(1,<sp/>12);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2e_pen_potential,<sp/>nodes_e2e,<sp/>E_e2e_pen_gradient);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>E_e2e_pen_hessian(12,<sp/>12);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(E_e2e_pen_gradient,<sp/>nodes_e2e,<sp/>E_e2e_pen_hessian);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2e_pen_gradient_func.init(func_e2e_inputs,<sp/>E_e2e_pen_gradient.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>E_e2e_pen_hessian_func.init(func_e2e_inputs,<sp/>E_e2e_pen_hessian.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>symbolicEquations::generateFrictionJacobianPiecewiseFunctions()<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>nodes{{x1s_x,<sp/>x1s_y,<sp/>x1s_z,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1e_x,<sp/>x1e_y,<sp/>x1e_z,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2s_x,<sp/>x2s_y,<sp/>x2s_z,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2e_x,<sp/>x2e_y,<sp/>x2e_z}};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>Symbolic<sp/>Arrays<sp/>for<sp/>each<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x1s({x1s_x,<sp/>x1s_y,<sp/>x1s_z});</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x1e({x1e_x,<sp/>x1e_y,<sp/>x1e_z});</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x2s({x2s_x,<sp/>x2s_y,<sp/>x2s_z});</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x2e({x2e_x,<sp/>x2e_y,<sp/>x2e_z});</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x1s_0({x1s_x0,<sp/>x1s_y0,<sp/>x1s_z0});</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x1e_0({x1e_x0,<sp/>x1e_y0,<sp/>x1e_z0});</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x2s_0({x2s_x0,<sp/>x2s_y0,<sp/>x2s_z0});</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>x2e_0({x2e_x0,<sp/>x2e_y0,<sp/>x2e_z0});</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>f1s({f1s_x,<sp/>f1s_y,<sp/>f1s_z});</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>f1e({f1e_x,<sp/>f1e_y,<sp/>f1e_z});</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>f2s({f2s_x,<sp/>f2s_y,<sp/>f2s_z});</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>f2e({f2e_x,<sp/>f2e_y,<sp/>f2e_z});</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>ffr_input<sp/>{x1s_x,<sp/>x1s_y,<sp/>x1s_z,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1e_x,<sp/>x1e_y,<sp/>x1e_z,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2s_x,<sp/>x2s_y,<sp/>x2s_z,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2e_x,<sp/>x2e_y,<sp/>x2e_z,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1s_x0,<sp/>x1s_y0,<sp/>x1s_z0,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1e_x0,<sp/>x1e_y0,<sp/>x1e_z0,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2s_x0,<sp/>x2s_y0,<sp/>x2s_z0,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2e_x0,<sp/>x2e_y0,<sp/>x2e_z0,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1s_x,<sp/>f1s_y,<sp/>f1s_z,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1e_x,<sp/>f1e_y,<sp/>f1e_z,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f2s_x,<sp/>f2s_y,<sp/>f2s_z,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f2e_x,<sp/>f2e_y,<sp/>f2e_z,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu,<sp/>dt,<sp/>K2};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>cforces<sp/>{f1s_x,<sp/>f1s_y,<sp/>f1s_z,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1e_x,<sp/>f1e_y,<sp/>f1e_z,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f2s_x,<sp/>f2s_y,<sp/>f2s_z,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f2e_x,<sp/>f2e_y,<sp/>f2e_z};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>f1(3,<sp/>1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>f2(3,<sp/>1);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>f1s.add_matrix(f1e,<sp/>f1);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>f2s.add_matrix(f2e,<sp/>f2);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>f1s_n;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(f1s,<sp/>f1s_n);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>f1e_n;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(f1e,<sp/>f1e_n);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>f2s_n;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(f2s,<sp/>f2s_n);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>f2e_n;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(f2e,<sp/>f2e_n);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>f1_n;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(f1,<sp/>f1_n);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>f2_n;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(f2,<sp/>f2_n);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>beta11<sp/>=<sp/>div(f1s_n,<sp/>f1_n);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>beta12<sp/>=<sp/>div(f1e_n,<sp/>f1_n);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>beta21<sp/>=<sp/>div(f2s_n,<sp/>f2_n);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>beta22<sp/>=<sp/>div(f2e_n,<sp/>f2_n);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>contact_norm(3,<sp/>1);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_to_unit_vector(f1,<sp/>contact_norm);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v1s(3,<sp/>1);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v1e(3,<sp/>1);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v2s(3,<sp/>1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v2e(3,<sp/>1);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x1s,<sp/>x1s_0,<sp/>v1s);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x1e,<sp/>x1e_0,<sp/>v1e);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x2s,<sp/>x2s_0,<sp/>v2s);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(x2e,<sp/>x2e_0,<sp/>v2e);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>v1s.mul_scalar(div(one,<sp/>dt),<sp/>v1s);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>v1e.mul_scalar(div(one,<sp/>dt),<sp/>v1e);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>v2s.mul_scalar(div(one,<sp/>dt),<sp/>v2s);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>v2e.mul_scalar(div(one,<sp/>dt),<sp/>v2e);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v1s_r(3,<sp/>1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v1e_r(3,<sp/>1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v2s_r(3,<sp/>1);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v2e_r(3,<sp/>1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>v1s.mul_scalar(beta11,<sp/>v1s_r);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>v1e.mul_scalar(beta12,<sp/>v1e_r);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>v2s.mul_scalar(beta21,<sp/>v2s_r);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>v2e.mul_scalar(beta22,<sp/>v2e_r);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v1(3,<sp/>1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v2(3,<sp/>1);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>v1s_r.add_matrix(v1e_r,<sp/>v1);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>v2s_r.add_matrix(v2e_r,<sp/>v2);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v_rel(3,<sp/>1);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(v1,<sp/>v2,<sp/>v_rel);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>tangent<sp/>velocity<sp/>of<sp/>edge<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>tv_rel(3,<sp/>1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>v_rel.elementwise_mul_matrix(contact_norm,<sp/>tv_rel);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>tmp<sp/>=<sp/>add(tv_rel.as_vec_basic());</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>contact_norm.mul_scalar(tmp,<sp/>tv_rel);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(v_rel,<sp/>tv_rel,<sp/>tv_rel);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>tv_rel_n;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>get_norm(tv_rel,<sp/>tv_rel_n);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>tv_rel_u(3,<sp/>1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_to_unit_vector(tv_rel,<sp/>tv_rel_u);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>gamma<sp/>=<sp/>sub(div(integer(2),<sp/>add(one,<sp/>exp(mul(integer(-1),<sp/>mul(K2,<sp/>tv_rel_n))))),<sp/>one);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STICKING<sp/>FRICTION<sp/>JACOBIAN<sp/><sp/><sp/>0<sp/>&lt;<sp/>γ<sp/>&lt;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr1(3,<sp/>1);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr2(3,<sp/>1);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>tv_rel_u.mul_scalar(mul(gamma,<sp/>mu),<sp/>ffr1);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr1.mul_scalar(integer(-1),<sp/>ffr2);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr1s(3,<sp/>1);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr1e(3,<sp/>1);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr2s(3,<sp/>1);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr2e(3,<sp/>1);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr1.mul_scalar(f1s_n,<sp/>ffr1s);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr1.mul_scalar(f1e_n,<sp/>ffr1e);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr2.mul_scalar(f2s_n,<sp/>ffr2s);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr2.mul_scalar(f2e_n,<sp/>ffr2e);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr_vec1({ffr1s.get(0,<sp/>0),<sp/>ffr1s.get(1,<sp/>0),<sp/>ffr1s.get(2,<sp/>0),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffr1e.get(0,<sp/>0),<sp/>ffr1e.get(1,<sp/>0),<sp/>ffr1e.get(2,<sp/>0),</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffr2s.get(0,<sp/>0),<sp/>ffr2s.get(1,<sp/>0),<sp/>ffr2s.get(2,<sp/>0),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffr2e.get(0,<sp/>0),<sp/>ffr2e.get(1,<sp/>0),<sp/>ffr2e.get(2,<sp/>0)});</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>friction_partial_dfr_dx1(12,<sp/>12);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>friction_partial_dfr_dfc1(12,<sp/>12);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr_vec1,<sp/>nodes,<sp/>friction_partial_dfr_dx1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr_vec1,<sp/>cforces,<sp/>friction_partial_dfr_dfc1);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>friction_partials_dfr_dx_sticking_func.init(ffr_input,<sp/>friction_partial_dfr_dx1.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>friction_partials_dfr_dfc_sticking_func.init(ffr_input,<sp/>friction_partial_dfr_dfc1.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SLIDING<sp/>FRICTION<sp/>JACOBIAN<sp/><sp/><sp/>γ<sp/>&gt;=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>tv_rel_u.mul_scalar(mu,<sp/>ffr1);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr1.mul_scalar(integer(-1),<sp/>ffr2);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr1.mul_scalar(f1s_n,<sp/>ffr1s);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr1.mul_scalar(f1e_n,<sp/>ffr1e);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr2.mul_scalar(f2s_n,<sp/>ffr2s);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr2.mul_scalar(f2e_n,<sp/>ffr2e);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr_vec2({ffr1s.get(0,<sp/>0),<sp/>ffr1s.get(1,<sp/>0),<sp/>ffr1s.get(2,<sp/>0),</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffr1e.get(0,<sp/>0),<sp/>ffr1e.get(1,<sp/>0),<sp/>ffr1e.get(2,<sp/>0),</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffr2s.get(0,<sp/>0),<sp/>ffr2s.get(1,<sp/>0),<sp/>ffr2s.get(2,<sp/>0),</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ffr2e.get(0,<sp/>0),<sp/>ffr2e.get(1,<sp/>0),<sp/>ffr2e.get(2,<sp/>0)});</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>friction_partial_dfr_dx2(12,<sp/>12);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>friction_partial_dfr_dfc2(12,<sp/>12);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr_vec2,<sp/>nodes,<sp/>friction_partial_dfr_dx2);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr_vec2,<sp/>cforces,<sp/>friction_partial_dfr_dfc2);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>friction_partials_dfr_dx_sliding_func.init(ffr_input,<sp/>friction_partial_dfr_dx2.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>friction_partials_dfr_dfc_sliding_func.init(ffr_input,<sp/>friction_partial_dfr_dfc2.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>symbolicEquations::generateFloorFrictionJacobianFunctions()<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>only<sp/>consider<sp/>x<sp/>and<sp/>y-displacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>node({x1s_x,<sp/>x1s_y});</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>node_0({x1s_x0,<sp/>x1s_y0});</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Symbol&gt;<sp/>fn<sp/>=<sp/>symbol(</highlight><highlight class="stringliteral">&quot;fn&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v(2,<sp/>1);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>subtract_matrix(node,<sp/>node_0,<sp/>v);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>v.mul_scalar(div(one,<sp/>dt),<sp/>v);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v_squared(2,<sp/>1);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>v.elementwise_mul_matrix(v,<sp/>v_squared);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>v_n<sp/>=<sp/>sqrt(add(v_squared.as_vec_basic()));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>v_hat(2,<sp/>1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_to_unit_vector(v,<sp/>v_hat);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>v_n_scaled<sp/>=<sp/>mul(K2,<sp/>v_n);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>gamma<sp/>=<sp/>sub(div(integer(2),<sp/>add(one,<sp/>exp(mul(integer(-1),<sp/>v_n_scaled)))),<sp/>one);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>RCP&lt;const<sp/>Basic&gt;<sp/>ffr_scalar<sp/>=<sp/>mul(mul(gamma,<sp/>mu),<sp/>fn);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>ffr(2,<sp/>1);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>v_hat.mul_scalar(mul(integer(-1),<sp/>ffr_scalar),<sp/>ffr);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>v_hat.mul_scalar(ffr_scalar,<sp/>ffr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>fn_vec({fn});</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_basic<sp/>ffr_input<sp/>{x1s_x,<sp/>x1s_y,<sp/>x1s_x0,<sp/>x1s_y0,<sp/>fn,<sp/>mu,<sp/>dt,<sp/>K2};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>floor_friction_partial_dfr_dx(2,<sp/>2);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>floor_friction_partial_dfr_dfn(2,<sp/>1);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr,<sp/>node,<sp/>floor_friction_partial_dfr_dx);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr,<sp/>fn_vec,<sp/>floor_friction_partial_dfr_dfn);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>floor_friction_partials_dfr_dx_func.init(ffr_input,<sp/>floor_friction_partial_dfr_dx.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>floor_friction_partials_dfr_dfn_func.init(ffr_input,<sp/>floor_friction_partial_dfr_dfn.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here,<sp/>we<sp/>assume<sp/>\gamma<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>ffr_scalar<sp/>=<sp/>mul(mu,<sp/>fn);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>v_hat.mul_scalar(mul(integer(-1),<sp/>ffr_scalar),<sp/>ffr);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>v_hat.mul_scalar(ffr_scalar,<sp/>ffr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>floor_friction_g1_partial_dfr_dx(2,<sp/>2);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>DenseMatrix<sp/>floor_friction_g1_partial_dfr_dfn(2,<sp/>1);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr,<sp/>node,<sp/>floor_friction_g1_partial_dfr_dx);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian(ffr,<sp/>fn_vec,<sp/>floor_friction_g1_partial_dfr_dfn);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>floor_friction_partials_gamma1_dfr_dx_func.init(ffr_input,<sp/>floor_friction_g1_partial_dfr_dx.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>floor_friction_partials_gamma1_dfr_dfn_func.init(ffr_input,<sp/>floor_friction_g1_partial_dfr_dfn.as_vec_basic(),<sp/>symbolic_cse,<sp/>opt_level);</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/radha/Desktop/dismech-rods-main/src/rod_mechanics/external_forces/symbolicEquations.cpp"/>
  </compounddef>
</doxygen>
